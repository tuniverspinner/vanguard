syntax = "proto3";
package cline;
import "cline/common.proto";
option java_package = "bot.cline.proto";
option java_multiple_files = true;

service StateService {
  rpc getLatestState(EmptyRequest) returns (State);
  rpc updateTerminalConnectionTimeout(UpdateTerminalConnectionTimeoutRequest) returns (UpdateTerminalConnectionTimeoutResponse);
  rpc updateTerminalReuseEnabled(BooleanRequest) returns (Empty);
  rpc getAvailableTerminalProfiles(EmptyRequest) returns (TerminalProfiles);
  rpc subscribeToState(EmptyRequest) returns (stream State);
  rpc toggleFavoriteModel(StringRequest) returns (Empty);
  rpc resetState(ResetStateRequest) returns (Empty);
  rpc togglePlanActModeProto(TogglePlanActModeRequest) returns (Boolean);
  rpc updateAutoApprovalSettings(AutoApprovalSettingsRequest) returns (Empty);
  rpc updateSettings(UpdateSettingsRequest) returns (Empty);
  rpc updateTelemetrySetting(TelemetrySettingRequest) returns (Empty);
  rpc setWelcomeViewCompleted(BooleanRequest) returns (Empty);
}

message State {
  string state_json = 1;
}

message TerminalProfiles {
  repeated TerminalProfile profiles = 1;
}

message TerminalProfile {
  string id = 1;
  string name = 2;
  optional string path = 3;
  optional string description = 4;
}

message TerminalProfileUpdateResponse {
  int32 closed_count = 1;
  int32 busy_terminals_count = 2;
  bool has_busy_terminals = 3;
}

message TogglePlanActModeRequest {
  Metadata metadata = 1;
  PlanActMode mode = 2;
  optional ChatContent chat_content = 3;
}

enum PlanActMode {
  PLAN = 0;
  ACT = 1;
}

enum OpenaiReasoningEffort {
  LOW = 0;
  MEDIUM = 1;
  HIGH = 2;
  MINIMAL = 3;
}

enum McpDisplayMode {
  RICH = 0;
  PLAIN = 1;
  MARKDOWN = 2;
}

message ChatContent {
  optional string message = 1;
  repeated string images = 2;
  repeated string files = 3;
}

message ResetStateRequest {
  Metadata metadata = 1;
  optional bool global = 2;
}

message AutoApprovalSettingsRequest {
  Metadata metadata = 1;
  message Actions {
    bool read_files = 1;
    bool read_files_externally = 2;
    bool edit_files = 3;
    bool edit_files_externally = 4;
    bool execute_safe_commands = 5;
    bool execute_all_commands = 6;
    bool use_browser = 7;
    bool use_mcp = 8;
  }
  int32 version = 2;
  bool enabled = 3;
  Actions actions = 4;
  int32 max_requests = 5;
  bool enable_notifications = 6;
  repeated string favorites = 7;
}

enum TelemetrySettingEnum {
  UNSET = 0;
  ENABLED = 1;
  DISABLED = 2;
}

message TelemetrySettingRequest {
  Metadata metadata = 1;
  TelemetrySettingEnum setting = 2;
}

// Browser settings for UpdateSettingsRequest
message BrowserSettingsUpdate {
  optional Viewport viewport = 1;
  optional string remote_browser_host = 2;
  optional bool remote_browser_enabled = 3;
  optional string chrome_executable_path = 4;
  optional bool disable_tool_use = 5;
  optional string custom_args = 6;
}

// Message for updating settings
message UpdateSettingsRequest {
  Metadata metadata = 1;
  optional ApiConfiguration api_configuration = 2;
  optional string telemetry_setting = 3;
  optional bool plan_act_separate_models_setting = 4;
  optional bool enable_checkpoints_setting = 5;
  optional bool mcp_marketplace_enabled = 6;
  optional int32 shell_integration_timeout = 8;
  optional bool terminal_reuse_enabled = 9;
  optional bool mcp_responses_collapsed = 10;
  optional McpDisplayMode mcp_display_mode = 11;
  optional int32 terminal_output_line_limit = 12;
  optional PlanActMode mode = 13;
  optional string preferred_language = 14;
  optional OpenaiReasoningEffort openai_reasoning_effort = 15;
  optional bool strict_plan_mode_enabled = 16;
  optional FocusChainSettings focus_chain_settings = 17;
  optional bool use_auto_condense = 18;
  optional string custom_prompt = 19;
  optional BrowserSettingsUpdate browser_settings = 20;
  optional string default_terminal_profile = 21;
  optional bool auto_retry_on_empty_assistant_message = 22;
}

// Complete API Configuration message
message ApiConfiguration {
  // Global configuration fields (not mode-specific)
  optional string cline_account_id = 1;
  optional string ulid = 2;
  optional string xai_api_key = 3;
  optional string groq_api_key = 4;
  optional int32 request_timeout_ms = 5;

  // Plan mode configurations
  optional string plan_mode_api_provider = 100;
  optional string plan_mode_api_model_id = 101;
  optional int32 plan_mode_thinking_budget_tokens = 102;
  optional string plan_mode_reasoning_effort = 103;
  optional string plan_mode_groq_model_id = 104;
  optional string plan_mode_groq_model_info = 105; // JSON string
  optional string plan_mode_open_router_model_id = 106;
  optional string plan_mode_open_router_model_info = 107; // JSON string

  // Act mode configurations
  optional string act_mode_api_provider = 200;
  optional string act_mode_api_model_id = 201;
  optional int32 act_mode_thinking_budget_tokens = 202;
  optional string act_mode_reasoning_effort = 203;
  optional string act_mode_groq_model_id = 204;
  optional string act_mode_groq_model_info = 205; // JSON string
  optional string act_mode_open_router_model_id = 206;
  optional string act_mode_open_router_model_info = 207; // JSON string

  // Favorited model IDs
  repeated string favorited_model_ids = 300;
}

message UpdateTerminalConnectionTimeoutRequest {
  optional int32 timeout_ms = 1;
}

message FocusChainSettings {
  bool enabled = 1;
  int32 remind_cline_interval = 2;
}

message Viewport {
  int32 width = 1;
  int32 height = 2;
}

message UpdateTerminalConnectionTimeoutResponse {
  optional int32 timeout_ms = 1;
}
